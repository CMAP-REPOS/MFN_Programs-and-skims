left_join(changes_MHN, by = join_by(TIPID)) %>%
left_join(in_MHN_hwynet_arc, by = "ABB") %>%                                                             #add new attributes to base MESO
mutate(MESO = ifelse(MESO == 1, 1, NA)) %>%
group_by(TIPID) %>%
fill(MESO, .direction = "updown") %>%
mutate(MESO = ifelse(ABB %in% in_forceMESO$LINK_ABB, 1, MESO),                                     #force MESO flag for list of additional links
THRULANES1 = ifelse(!is.na(NEW_THRULANES1), NEW_THRULANES1, THRULANES1),
THRULANES2 = ifelse(!is.na(NEW_THRULANES2), NEW_THRULANES2, THRULANES2),
type = ifelse(!is.na(NEW_TYPE1), NEW_TYPE1, as.numeric(TYPE1)),
DIRECTIONS = ifelse(!is.na(NEW_DIRECTIONS), NEW_DIRECTIONS, as.numeric(DIRECTIONS)),
MESO = ifelse((ANODE %in% qc_poe$NODE_ID) | (BNODE %in% qc_poe$NODE_ID), 1, MESO)) %>%      #flag POE to keep in list
filter(MESO == 1)
#grab list of removal
removeBaseMeso <- updated_MHN_MESO %>%
filter(ACTION_CODE == 3)  %>%
select(ABB) %>%
unique()
#Continue
updated_MHN_MESO <- updated_MHN_MESO %>%
filter(ACTION_CODE != 3) %>%
mutate(linkID = paste(ANODE, BNODE, sep = "-")) %>%
distinct() %>%
mutate(flag = "tipProj", vdf = 10, Modes = "T", MESO = 1, typeMHN = type)%>%
select(flag, TIPID, linkID, ABB, ANODE, BNODE, DIRECTIONS, MESO, ACTION_CODE,
type, typeMHN, vdf, MILES, Modes, THRULANES1, THRULANES2, SHAPE_Length, SHAPE) %>%
distinct() %>%
group_by(ABB) %>%
mutate(count = n()) %>%
ungroup() %>%
left_join(tipIDS, by = "TIPID") %>%
group_by(ABB) %>%
arrange(COMPLETION_YEAR) %>%
mutate(remFlag = ifelse(count > 1 & row_number() == 1, 1, 0)) %>%
filter(remFlag == 0) %>%
ungroup() %>%
select(flag, linkID, ABB, ANODE, BNODE, DIRECTIONS, MESO,
type, typeMHN, vdf, MILES, Modes, THRULANES1, THRULANES2, SHAPE_Length)
nBaseMESO <- base_MHN_MESO %>%
st_drop_geometry() %>%
filter(!(ABB %in% updated_MHN_MESO$ABB)) %>%
select(colnames(updated_MHN_MESO)) %>%
rbind(updated_MHN_MESO) %>%                               #remove any of these from base meso, then bind base meso
filter(!(ABB %in% removeBaseMeso$ABB)) %>%                #then remove final remove action list
filter(!(linkID %in% manualRemove$linkID))
#now we have all the links
#2. FORMAT CONNECTOR LINKS####
#Format MFN Links1####
futureLinks_baseT <- nBaseMESO %>%               #MHN future links
mutate(timau = NA) %>%
rename(Length = SHAPE_Length, INODE = ANODE, JNODE = BNODE, Miles = MILES, lanes = THRULANES1, lanes2 = THRULANES2) %>%
mutate(INODE = as.numeric(INODE), JNODE = as.numeric(JNODE))
futureLinks_baseGeo <- in_MHN_hwynet_arc %>%
select(ANODE, BNODE, SHAPE) %>%
mutate(linkID = paste(ANODE, BNODE, sep = "-")) %>%
full_join(futureLinks_baseT, by = c("linkID")) %>%
filter(!is.na(flag)) %>%
filter(ABB %in% futureLinks_baseT$ABB) %>%
select(colnames(futureLinks_baseT), SHAPE)
tempNodes2 <- futureLinks_baseT %>%
select(INODE, JNODE) %>%
pivot_longer(cols = INODE:JNODE, names_to = "type", values_to = "NODE_ID") %>%
select(NODE_ID) %>%
distinct()
#Format MFN Nodes1####
#Identify potential nodes for connectors to attach to
#from link, filter DIRECTIONS == 2 & TYPEMHN == 1
tempNodes1 <- futureLinks_baseT %>%
filter(DIRECTIONS == 2) %>%
filter(typeMHN == 1) %>%
select(INODE, JNODE) %>%
pivot_longer(cols = INODE:JNODE, names_to = "type", values_to = "NODE_ID") %>%
select(NODE_ID) %>%
group_by(NODE_ID) %>%
unique() %>%
ungroup() %>%
arrange(NODE_ID) %>%
mutate(MHN_ID = as.numeric(NODE_ID))
base_nodes <- tempNodes1 %>%
left_join(in_MHN_hwynodes, by = "NODE_ID") %>%
select(MHN_ID, X, Y, Shape) %>%
rename(POINT_X = X, POINT_Y = Y)
base_nodes_pt <- base_nodes %>% st_drop_geometry()
#Attach special nodes to base nodes and find distance####
temp_dist1 <- specialNodes %>%
cross_join(base_nodes_pt) %>%
mutate(distance = sqrt(((centroidX - POINT_X)^2) + ((centroidY - POINT_Y)^2)))
#Identify duplicate MHN nodes and MFN special nodes####
#if any within XXX distance, remove and use centroid
duplicateNodes <- temp_dist1 %>% filter(distance <= 0.001)
#Develop special links####
connectors <- temp_dist1 %>%
filter(!(MHN_ID %in% duplicateNodes$MHN_ID)) %>%
group_by(specialID) %>%
filter(distance == min(distance))%>%
ungroup() %>%
mutate(lineID = specialID,
lineID2 = MHN_ID) %>%
select(lineID, lineID2, POINT_X, POINT_Y, centroidX, centroidY) %>%
pivot_longer(cols = c(POINT_X, centroidX), names_to = "type", values_to = "coordX") %>%
pivot_longer(cols = c(POINT_Y, centroidY), names_to = "typeY", values_to = "coordY") %>%
mutate(retain_c = ifelse(type == "centroidX" & typeY == "centroidY", 1, 0),
retain_n = ifelse(type == "POINT_X" & typeY == "POINT_Y", 1, 0)) %>%
filter(retain_c == 1 | retain_n == 1) %>%
select(lineID, lineID2, coordX, coordY) %>%
distinct()
connectors = st_as_sf(connectors, coords = c("coordX", "coordY"), crs = 26771) #crs = 26771 this is the projection to be used for all shape files
allConnectors_f <- st_as_sf(connectors, wkt = geometry) %>%
group_by(lineID, lineID2) %>%
summarise(do_union = FALSE) %>%
st_cast("MULTILINESTRING") %>%
rename(specialID = lineID, NODE_ID = lineID2) %>%
left_join(st_drop_geometry(specialNodes), by = ("specialID")) %>%
mutate(linkID = paste(specialID, NODE_ID, sep = "-"),
INODE= specialID, JNODE = NODE_ID,
Length = st_length(geometry),
DIRECTIONS = 2, MESO = 1, type = 4, TYPE2 = "0", vdf = 10, POSTEDSPEED1 = 0, POSTEDSPEED2 = 0, Miles = Length/5280, Modes = "T",
lanes = 2, lanes2 = 2, timau = NA) %>%
rename(SHAPE = geometry) %>%
mutate(count = NA, typeMHN = NA, ABB = paste(INODE, JNODE, type, sep = "-")) %>%
select(colnames(futureLinks_baseGeo))
#ADD Special Links TO BASE####
finalLinks1 <- futureLinks_baseGeo %>%
filter(!(INODE %in% duplicateNodes$MHN_ID)) %>%         #remove links associated with duplicate nodes first
filter(!(JNODE %in% duplicateNodes$MHN_ID)) %>%
rbind(allConnectors_f) %>%
st_as_sf() %>%
st_cast("MULTILINESTRING") %>%
select(linkID:type, vdf, Miles:lanes2, SHAPE) %>%
mutate(type = as.numeric(type),
lanes = ifelse(lanes < 2, 2, lanes),
lanes2 = ifelse(lanes2 == 0 | is.na(lanes2), lanes, lanes2)) %>%
filter(!is.na(type)) %>%
filter(!is.na(lanes)) %>%
distinct() %>%
mutate(lanes = ifelse(INODE <= 150, 1, lanes),
lanes2 = ifelse(INODE <= 150, 1, lanes2),
#     DIRECTIONS = case_when(
#       INODE > 5000 & (lanes == lanes2 & lanes == 1) ~ 1,
#       INODE > 5000 & (lanes == lanes2 & lanes == 2) ~ 2,
#       .default = DIRECTIONS
#     )
) %>%
rename(Type = type, VDF = vdf, LANES = lanes, LANES2 = lanes2)%>%
select(DIRECTIONS, Type, VDF,
INODE, JNODE, Miles, Modes, LANES, LANES2) %>%
mutate(MESOZONE = 1)
#3. FINALIZE####
#--Format final MFN link fields####
finalLinks <- finalLinks1 %>%
distinct() %>%
mutate(Meso = 1,
Type = case_when(
INODE < 133 ~ 4,
INODE >= 133 & INODE <=150 ~ 7,
INODE > 150 ~ 1
),
#   DIRECTIONS = ifelse(INODE <= 1999, 2, DIRECTIONS),
#   DIRECTIONS = ifelse(INODE %in% qc_poe$NODE_ID, 2, DIRECTIONS),
Shape_Length = st_length(SHAPE)
) %>%
select(INODE, JNODE, Meso, DIRECTIONS:LANES2, SHAPE, Shape_Length) %>%
mutate(DIRECTIONS = as.character(DIRECTIONS)) %>%
group_by(INODE, JNODE) %>%
mutate(count = n()) %>%
filter(count == 1 | row_number() == 1) %>%
group_by(INODE, JNODE) %>%
mutate(count = n())
qc_final <- finalLinks %>%
group_by(INODE) %>%
mutate(Icount = n()) %>%
group_by(JNODE) %>%
mutate(Jcount = n())
#--Format final MFN node fields####
finalNodes <- finalLinks %>%
st_drop_geometry() %>%
select(INODE, JNODE) %>%
pivot_longer(cols = INODE:JNODE, names_to = "type", values_to = "NODE_ID") %>%
select(NODE_ID) %>%
group_by(NODE_ID) %>%
unique() %>%
ungroup() %>%
arrange(NODE_ID) %>%
mutate(NODE_ID = as.integer(NODE_ID)) %>%
left_join(in_MHN_hwynodes, by = "NODE_ID") %>%
select(NODE_ID, X, Y, Shape) %>%
mutate(X = ifelse(NODE_ID < 2000, NA, X),
Y = ifelse(NODE_ID < 2000, NA, Y)) %>%
left_join(specialNodes, by = c("NODE_ID" = "specialID")) %>%
mutate(POINT_X = ifelse(is.na(X), centroidX, X),
POINT_Y = ifelse(is.na(Y), centroidY, Y)) %>%
select(-Shape.y) %>%
ungroup()%>%
mutate(idcount = length(unique(NODE_ID)))%>%
select(NODE_ID, POINT_X, POINT_Y) %>%
mutate(xcoord = POINT_X, ycoord = POINT_Y) %>%
st_as_sf(coords = c("xcoord", "ycoord"), crs = 26771)  %>%
st_intersection(in_mesozoneGeo) %>%
distinct() %>%
group_by(NODE_ID) %>%
mutate(count = n()) %>%
ungroup() %>%
filter(!(count == 2 & MESOZONE == 187)) %>%
rename(NODE_ID_T=NODE_ID)
#Identify node140 links####
node140 <- finalLinks %>%
st_drop_geometry() %>%
filter(INODE == 140 | JNODE == 140) %>%
select(INODE, JNODE)
#Identify node143 links####
node143 <- finalLinks %>%
st_drop_geometry() %>%
filter(INODE == 143 | JNODE == 143) %>%
select(INODE, JNODE)
#OUTPUT####
file = paste("y", as.character(yr), sep = "")
outLinkFile = paste("CMAP_HWY_LINK_", file, sep = "")
st_write(obj = finalLinks, layer = outLinkFile, dsn = outputDir, append = FALSE)
outNodeFile = paste("CMAP_HWY_NODE_", file, sep = "")
st_write(obj =finalNodes, layer = outNodeFile, dsn = outputDir, append = FALSE)
#Write Node 140 file####
out140File = paste(outPath, "/Lognodes/unlink_lognode140_", file, ".txt", sep = "")
sink(out140File, append = FALSE)
writeLines(noquote("c MESO FREIGHT NETWORK BATCHIN FILE"))
writeLines(noquote(paste("c ", "Generated: ", Sys.Date(), sep = "")))
writeLines(noquote("c File to remove the highway and rail connector links for logistics node 140."))
writeLines("")
writeLines("")
writeLines(noquote("t links"))
writeLines(noquote(paste("d= ", node140$INODE, "   ", node140$JNODE)))
writeLines(noquote(paste("d= ", rail140$INODE_T, "   ", rail140$JNODE_T)))
sink()
#Write Node 143 file####
out143File = paste(outPath, "/Lognodes/unlink_lognode143_", file, ".txt", sep = "")
sink(out143File, append = FALSE)
writeLines(noquote("c MESO FREIGHT NETWORK BATCHIN FILE"))
writeLines(noquote(paste("c ", "Generated: ", Sys.Date(), sep = "")))
writeLines(noquote("c File to remove the South Suburban Airport connector links for logistics node 143."))
writeLines("")
writeLines("")
writeLines(noquote("t links"))
writeLines(noquote(paste("d= ", node143$INODE, "   ", node143$JNODE)))
sink()
}
#--SELECT ADDITIONAL FUTURE YEAR MESO LINKS--####
#--DEPENDING ON ACTION CODE, ENSURE FUTURE LINKS FROM PROJECT HAVE ACCURATE MESO FLAG VALUE
#1=modify link
#2=replace link
#3=delete link
#4=add link
#years = list(2022)
years = list(2022, 2030, 2040, 2050, 2060)
for(yr in years){
#Set year
if(yr == 2060){
year = 2050
}else{
year = yr
}
#1. GENERATE LINKS FROM MHN####
#Select tip projects completed by this year##
tipIDS <- in_MHN_hwyproj %>%
filter(COMPLETION_YEAR != 9999) %>%                                    #remove projects no longer active
filter(TIPID != "2080005") %>%                                         #remove LSD project since no access
filter(TIPID != "9110006") %>%                                         #remove project; random link giving me issues
mutate(COMPLETION_YEAR = as.numeric(COMPLETION_YEAR)) %>%
st_drop_geometry() %>%                                                 #remove geometry
filter(COMPLETION_YEAR <= year)                                        #--SELECT ALL PROJECTS AND LINKids FROM HWYPROJ FOR YEAR
#Identify changes in links for all years
updated_MHN_MESO <- tipIDS %>%
left_join(changes_MHN, by = join_by(TIPID)) %>%
left_join(in_MHN_hwynet_arc, by = "ABB") %>%                                                             #add new attributes to base MESO
mutate(MESO = ifelse(MESO == 1, 1, NA)) %>%
group_by(TIPID) %>%
fill(MESO, .direction = "updown") %>%
mutate(MESO = ifelse(ABB %in% in_forceMESO$LINK_ABB, 1, MESO),                                     #force MESO flag for list of additional links
THRULANES1 = ifelse(!is.na(NEW_THRULANES1), NEW_THRULANES1, THRULANES1),
THRULANES2 = ifelse(!is.na(NEW_THRULANES2), NEW_THRULANES2, THRULANES2),
type = ifelse(!is.na(NEW_TYPE1), NEW_TYPE1, as.numeric(TYPE1)),
DIRECTIONS = ifelse(!is.na(NEW_DIRECTIONS), NEW_DIRECTIONS, as.numeric(DIRECTIONS)),
MESO = ifelse((ANODE %in% qc_poe$NODE_ID) | (BNODE %in% qc_poe$NODE_ID), 1, MESO)) %>%      #flag POE to keep in list
filter(MESO == 1)
#grab list of removal
removeBaseMeso <- updated_MHN_MESO %>%
filter(ACTION_CODE == 3)  %>%
select(ABB) %>%
unique()
#Continue
updated_MHN_MESO <- updated_MHN_MESO %>%
filter(ACTION_CODE != 3) %>%
mutate(linkID = paste(ANODE, BNODE, sep = "-")) %>%
distinct() %>%
mutate(flag = "tipProj", vdf = 10, Modes = "T", MESO = 1, typeMHN = type)%>%
select(flag, TIPID, linkID, ABB, ANODE, BNODE, DIRECTIONS, MESO, ACTION_CODE,
type, typeMHN, vdf, MILES, Modes, THRULANES1, THRULANES2, SHAPE_Length, SHAPE) %>%
distinct() %>%
group_by(ABB) %>%
mutate(count = n()) %>%
ungroup() %>%
left_join(tipIDS, by = "TIPID") %>%
group_by(ABB) %>%
arrange(COMPLETION_YEAR) %>%
mutate(remFlag = ifelse(count > 1 & row_number() == 1, 1, 0)) %>%
filter(remFlag == 0) %>%
ungroup() %>%
select(flag, linkID, ABB, ANODE, BNODE, DIRECTIONS, MESO,
type, typeMHN, vdf, MILES, Modes, THRULANES1, THRULANES2, SHAPE_Length)
nBaseMESO <- base_MHN_MESO %>%
st_drop_geometry() %>%
filter(!(ABB %in% updated_MHN_MESO$ABB)) %>%
select(colnames(updated_MHN_MESO)) %>%
rbind(updated_MHN_MESO) %>%                               #remove any of these from base meso, then bind base meso
filter(!(ABB %in% removeBaseMeso$ABB)) %>%                #then remove final remove action list
filter(!(linkID %in% manualRemove$linkID))
#now we have all the links
#2. FORMAT CONNECTOR LINKS####
#Format MFN Links1####
futureLinks_baseT <- nBaseMESO %>%               #MHN future links
mutate(timau = NA) %>%
rename(Length = SHAPE_Length, INODE = ANODE, JNODE = BNODE, Miles = MILES, lanes = THRULANES1, lanes2 = THRULANES2) %>%
mutate(INODE = as.numeric(INODE), JNODE = as.numeric(JNODE))
futureLinks_baseGeo <- in_MHN_hwynet_arc %>%
select(ANODE, BNODE, SHAPE) %>%
mutate(linkID = paste(ANODE, BNODE, sep = "-")) %>%
full_join(futureLinks_baseT, by = c("linkID")) %>%
filter(!is.na(flag)) %>%
filter(ABB %in% futureLinks_baseT$ABB) %>%
select(colnames(futureLinks_baseT), SHAPE)
tempNodes2 <- futureLinks_baseT %>%
select(INODE, JNODE) %>%
pivot_longer(cols = INODE:JNODE, names_to = "type", values_to = "NODE_ID") %>%
select(NODE_ID) %>%
distinct()
#Format MFN Nodes1####
#Identify potential nodes for connectors to attach to
#from link, filter DIRECTIONS == 2 & TYPEMHN == 1
tempNodes1 <- futureLinks_baseT %>%
filter(DIRECTIONS == 2) %>%
filter(typeMHN == 1) %>%
select(INODE, JNODE) %>%
pivot_longer(cols = INODE:JNODE, names_to = "type", values_to = "NODE_ID") %>%
select(NODE_ID) %>%
group_by(NODE_ID) %>%
unique() %>%
ungroup() %>%
arrange(NODE_ID) %>%
mutate(MHN_ID = as.numeric(NODE_ID))
base_nodes <- tempNodes1 %>%
left_join(in_MHN_hwynodes, by = "NODE_ID") %>%
select(MHN_ID, X, Y, Shape) %>%
rename(POINT_X = X, POINT_Y = Y)
base_nodes_pt <- base_nodes %>% st_drop_geometry()
#Attach special nodes to base nodes and find distance####
temp_dist1 <- specialNodes %>%
cross_join(base_nodes_pt) %>%
mutate(distance = sqrt(((centroidX - POINT_X)^2) + ((centroidY - POINT_Y)^2)))
#Identify duplicate MHN nodes and MFN special nodes####
#if any within XXX distance, remove and use centroid
duplicateNodes <- temp_dist1 %>% filter(distance <= 0.001)
#Develop special links####
connectors <- temp_dist1 %>%
filter(!(MHN_ID %in% duplicateNodes$MHN_ID)) %>%
group_by(specialID) %>%
filter(distance == min(distance))%>%
ungroup() %>%
mutate(lineID = specialID,
lineID2 = MHN_ID) %>%
select(lineID, lineID2, POINT_X, POINT_Y, centroidX, centroidY) %>%
pivot_longer(cols = c(POINT_X, centroidX), names_to = "type", values_to = "coordX") %>%
pivot_longer(cols = c(POINT_Y, centroidY), names_to = "typeY", values_to = "coordY") %>%
mutate(retain_c = ifelse(type == "centroidX" & typeY == "centroidY", 1, 0),
retain_n = ifelse(type == "POINT_X" & typeY == "POINT_Y", 1, 0)) %>%
filter(retain_c == 1 | retain_n == 1) %>%
select(lineID, lineID2, coordX, coordY) %>%
distinct()
connectors = st_as_sf(connectors, coords = c("coordX", "coordY"), crs = 26771) #crs = 26771 this is the projection to be used for all shape files
allConnectors_f <- st_as_sf(connectors, wkt = geometry) %>%
group_by(lineID, lineID2) %>%
summarise(do_union = FALSE) %>%
st_cast("MULTILINESTRING") %>%
rename(specialID = lineID, NODE_ID = lineID2) %>%
left_join(st_drop_geometry(specialNodes), by = ("specialID")) %>%
mutate(linkID = paste(specialID, NODE_ID, sep = "-"),
INODE= specialID, JNODE = NODE_ID,
Length = st_length(geometry),
DIRECTIONS = 2, MESO = 1, type = 4, TYPE2 = "0", vdf = 10, POSTEDSPEED1 = 0, POSTEDSPEED2 = 0, Miles = Length/5280, Modes = "T",
lanes = 2, lanes2 = 2, timau = NA) %>%
rename(SHAPE = geometry) %>%
mutate(count = NA, typeMHN = NA, ABB = paste(INODE, JNODE, type, sep = "-")) %>%
select(colnames(futureLinks_baseGeo))
#ADD Special Links TO BASE####
finalLinks1 <- futureLinks_baseGeo %>%
filter(!(INODE %in% duplicateNodes$MHN_ID)) %>%         #remove links associated with duplicate nodes first
filter(!(JNODE %in% duplicateNodes$MHN_ID)) %>%
rbind(allConnectors_f) %>%
st_as_sf() %>%
st_cast("MULTILINESTRING") %>%
select(linkID:type, vdf, Miles:lanes2, SHAPE) %>%
mutate(type = as.numeric(type),
lanes = ifelse(lanes < 2, 2, lanes),
lanes2 = ifelse(lanes2 == 0 | is.na(lanes2), lanes, lanes2)) %>%
filter(!is.na(type)) %>%
filter(!is.na(lanes)) %>%
distinct() %>%
mutate(lanes = ifelse(INODE <= 150, 1, lanes),
lanes2 = ifelse(INODE <= 150, 1, lanes2),
#     DIRECTIONS = case_when(
#       INODE > 5000 & (lanes == lanes2 & lanes == 1) ~ 1,
#       INODE > 5000 & (lanes == lanes2 & lanes == 2) ~ 2,
#       .default = DIRECTIONS
#     )
) %>%
rename(Type = type, VDF = vdf, LANES = lanes, LANES2 = lanes2)%>%
select(DIRECTIONS, Type, VDF,
INODE, JNODE, Miles, Modes, LANES, LANES2) %>%
mutate(MESOZONE = 1)
#3. FINALIZE####
#--Format final MFN link fields####
finalLinks <- finalLinks1 %>%
distinct() %>%
mutate(Meso = 1,
Type = case_when(
INODE < 133 ~ 4,
INODE >= 133 & INODE <=150 ~ 7,
INODE > 150 ~ 1
),
#   DIRECTIONS = ifelse(INODE <= 1999, 2, DIRECTIONS),
#   DIRECTIONS = ifelse(INODE %in% qc_poe$NODE_ID, 2, DIRECTIONS),
Shape_Length = st_length(SHAPE)
) %>%
select(INODE, JNODE, Meso, DIRECTIONS:LANES2, SHAPE, Shape_Length) %>%
mutate(DIRECTIONS = as.character(DIRECTIONS)) %>%
group_by(INODE, JNODE) %>%
mutate(count = n()) %>%
filter(count == 1 | row_number() == 1) %>%
group_by(INODE, JNODE) %>%
mutate(count = n())
qc_final <- finalLinks %>%
group_by(INODE) %>%
mutate(Icount = n()) %>%
group_by(JNODE) %>%
mutate(Jcount = n())
#--Format final MFN node fields####
finalNodes <- finalLinks %>%
st_drop_geometry() %>%
select(INODE, JNODE) %>%
pivot_longer(cols = INODE:JNODE, names_to = "type", values_to = "NODE_ID") %>%
select(NODE_ID) %>%
group_by(NODE_ID) %>%
unique() %>%
ungroup() %>%
arrange(NODE_ID) %>%
mutate(NODE_ID = as.integer(NODE_ID)) %>%
left_join(in_MHN_hwynodes, by = "NODE_ID") %>%
select(NODE_ID, X, Y, Shape) %>%
mutate(X = ifelse(NODE_ID < 2000, NA, X),
Y = ifelse(NODE_ID < 2000, NA, Y)) %>%
left_join(specialNodes, by = c("NODE_ID" = "specialID")) %>%
mutate(POINT_X = ifelse(is.na(X), centroidX, X),
POINT_Y = ifelse(is.na(Y), centroidY, Y)) %>%
select(-Shape.y) %>%
ungroup()%>%
mutate(idcount = length(unique(NODE_ID)))%>%
select(NODE_ID, POINT_X, POINT_Y) %>%
mutate(xcoord = POINT_X, ycoord = POINT_Y) %>%
st_as_sf(coords = c("xcoord", "ycoord"), crs = 26771)  %>%
st_intersection(in_mesozoneGeo) %>%
distinct() %>%
group_by(NODE_ID) %>%
mutate(count = n()) %>%
ungroup() %>%
filter(!(count == 2 & MESOZONE == 187)) %>%
rename(NODE_ID_T=NODE_ID)
#Identify node140 links####
node140 <- finalLinks %>%
st_drop_geometry() %>%
filter(INODE == 140 | JNODE == 140) %>%
select(INODE, JNODE)
#Identify node143 links####
node143 <- finalLinks %>%
st_drop_geometry() %>%
filter(INODE == 143 | JNODE == 143) %>%
select(INODE, JNODE)
#OUTPUT####
file = paste("y", as.character(yr), sep = "")
outLinkFile = paste("CMAP_HWY_LINK_", file, sep = "")
st_write(obj = finalLinks, layer = outLinkFile, dsn = outputDir, append = FALSE)
outNodeFile = paste("CMAP_HWY_NODE_", file, sep = "")
st_write(obj =finalNodes, layer = outNodeFile, dsn = outputDir, append = FALSE)
#Write Node 140 file####
out140File = paste(outPath, "/Lognodes/unlink_lognode140_", file, ".txt", sep = "")
sink(out140File, append = FALSE)
writeLines(noquote("c MESO FREIGHT NETWORK BATCHIN FILE"))
writeLines(noquote(paste("c ", "Generated: ", Sys.Date(), sep = "")))
writeLines(noquote("c File to remove the highway and rail connector links for logistics node 140."))
writeLines("")
writeLines("")
writeLines(noquote("t links"))
writeLines(noquote(paste("d= ", node140$INODE, "   ", node140$JNODE)))
writeLines(noquote(paste("d= ", rail140$INODE_T, "   ", rail140$JNODE_T)))
sink()
#Write Node 143 file####
out143File = paste(outPath, "/Lognodes/unlink_lognode143_", file, ".txt", sep = "")
sink(out143File, append = FALSE)
writeLines(noquote("c MESO FREIGHT NETWORK BATCHIN FILE"))
writeLines(noquote(paste("c ", "Generated: ", Sys.Date(), sep = "")))
writeLines(noquote("c File to remove the South Suburban Airport connector links for logistics node 143."))
writeLines("")
writeLines("")
writeLines(noquote("t links"))
writeLines(noquote(paste("d= ", node143$INODE, "   ", node143$JNODE)))
sink()
}
